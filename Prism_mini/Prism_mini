export function Name() { return "Prism Mini"; }
export function VendorId() { return ; }
export function ProductId() { return ; }
export function Publisher() { return "PrismRGB"; }
export function Size() { return [1, 1]; }
export function DefaultPosition(){ return [0, 0]; }
export function DefaultScale(){ return 1.0; }
export function Type() { return "Hid"; }
export function SubdeviceController(){ return true; }
/* global
shutdownColor:readonly
LightingMode:readonly
forcedColor:readonly
HWL_enable:readonly
HWL_effectMode:readonly
HWL_return:readonly
HWL_returnafter:readonly
HWL_effectSpeed:readonly
HWL_color:readonly
HWL_brightness:readonly
ColorCompression_enable:readonly
FPS:readonly
*/
export function ControllableParameters() {
	return [
		{"property":"shutdownColor", "group":"lighting", "label":"Shutdown Color", "min":"0", "max":"360", "type":"color", "default":"#000000"},
		{"property":"LightingMode", "group":"lighting", "label":"Lighting Mode", "type":"combobox", "values":["Canvas", "Forced"], "default":"Canvas"},
		{"property":"forcedColor", "group":"lighting", "label":"Forced Color", "min":"0", "max":"360", "type":"color", "default":"#FF0000"},
		{"property":"ColorCompression_enable", "group":"", "label":"Enable Color Compression (reduces color spectrum & raises frame rate)", "type":"boolean", "default":"false"},
		{"property":"HWL_enable", "group":"", "label":"Enable Hardware Lighting", "type":"boolean", "default":"false"},
		{"property":"HWL_effectMode", "group":"", "label":"Hardware Lighting Effect", "type":"combobox", "values":["Rainbow Wave", "Rainbow Cycle", "Solid Color", "Breathing Color"], "default":"Solid Color"},
		{"property":"HWL_return", "group":"", "label":"Enable returning to Hardware Lighting when not controlled by SignalRGB", "type":"boolean", "default":"false"},
		{"property":"HWL_returnafter", "group":"", "label":"Return to Hardware Lighting after selected amount seconds", "step":"1", "type":"number", "min":"1", "max":"10", "default":"3"},
		{"property":"HWL_effectSpeed", "group":"", "label":"Speed of Hardware Lighting Effect", "step":"1", "type":"number", "min":"1", "max":"20", "default":"6"},
		{"property":"HWL_color", "group":"", "label":"Select color for Solid & Breathing Effect", "min":"0", "max":"360", "type":"color", "default":"#800080"},
		{"property":"HWL_brightness", "group":"", "label":"Hardware Lighting Brightness", "step":"1", "type":"number", "min":"10", "max":"100", "default":"50"},
		{"property":"FPS", "group":"", "label":"FPS Boost", "type":"boolean", "default": "false", description: "May increase framerate"},

	];
}
const DeviceMaxLedLimit = 120;
const ChannelArray =
[
	["Channel 1", DeviceMaxLedLimit],
];

function SetupChannels() {
	device.SetLedLimit(DeviceMaxLedLimit);

	for(let i = 0; i < ChannelArray.length; i++) {
		device.addChannel(ChannelArray[i][0], ChannelArray[i][1]);
	}
}

const PluginVersion = "1.0.0";

const vKeyNames = [];
const vKeyPositions = [];
const MaxLedsInPacket = 20;

let lastHWLchange = 0;
let HWLupdateRequested = false;

export function LedNames() {
	return vKeyNames;
}

export function LedPositions() {
	return vKeyPositions;
}

export function onFPSChanged() {
	device.setFrameRateTarget(FPS ? 60 : 33);
	FPS && device.log("Going into Exhilaratingly Fast and Infinitely Whimsical Mode!");
}

export function Initialize() {
	onFPSChanged();
	SetupChannels();
	requestFirmwareVersion();
}

function compareFirmwareVersion() {
	const firmwarePacket = device.read([0x00], 4, 10);
	const FirmwareVersion = firmwarePacket[1] + "." + firmwarePacket[2] + "." + firmwarePacket[3];
	// device.log("Firmware version: " + FirmwareVersion);
	// device.log("Plugin version:   " + PluginVersion);

	if(FirmwareVersion !== PluginVersion) {
		device.log("Firmware <-> Plugin version mismatch! Make sure to use matching versions!");
		device.notify(`Firmware ${FirmwareVersion} <-> Plugin ${PluginVersion} version mismatch!`, `Make sure to use matching versions!`, 0);
	}
}

function requestFirmwareVersion() {
	const packet = [ 0x00, 0x00, 0x00, 0x00, 0xCC ];
	device.write(packet, 65);
	compareFirmwareVersion();
}

export function Render() {
	for(let i = 0; i < ChannelArray.length; i++) {
		SendChannel(i);
	}

	if(HWLupdateRequested == true) {
		const currentTime = Date.now();

		if(currentTime - lastHWLchange >= 3000) {
			updateHWLsettings();
		}
	}
}

export function Shutdown(SystemSuspending) {

	if(SystemSuspending){
		for(let i = 0; i < ChannelArray.length; i++) {
			SendChannel(i, "#000000"); // Go Dark on System Sleep/Shutdown
		}
	}else{
		for(let i = 0; i < ChannelArray.length; i++) {
			SendChannel(i, shutdownColor);
		}
	}

}

function SendChannel(Channel, overrideColor) {
	const componentChannel = device.channel(ChannelArray[Channel][0]);
	let ChannelLedCount = componentChannel.ledCount > ChannelArray[Channel][1] ? ChannelArray[Channel][1] : componentChannel.ledCount;

	let RGBData = [];

	const multiplier = ColorCompression_enable ? 2 : 1;
	const compressedRGB = [];

	if(overrideColor) {
		RGBData = device.createColorArray(overrideColor, ChannelLedCount, "Inline");
	} else if(LightingMode === "Forced") {
		RGBData = device.createColorArray(forcedColor, ChannelLedCount, "Inline");
	} else if(componentChannel.shouldPulseColors()) {
		ChannelLedCount = 512;

		const pulseColor = device.getChannelPulseColor(ChannelArray[Channel][0]);
		RGBData = device.createColorArray(pulseColor, ChannelLedCount, "Inline");
	} else {
		RGBData = componentChannel.getColors("Inline");
	}

	if(ColorCompression_enable) {
		for(let runCount = 0; runCount < ChannelLedCount * 3 / multiplier; runCount++) {
			compressedRGB[(runCount*3)] = (((RGBData[(runCount*6)] & 0xFF) >> 4) | ((((RGBData[(runCount*6)+1] & 0xFF) >> 4) & 0xFF) << 4));
			compressedRGB[(runCount*3)+1] = (((RGBData[(runCount*6)+2] & 0xFF) >> 4) | ((((RGBData[(runCount*6)+3] & 0xFF) >> 4) & 0xFF) << 4));
			compressedRGB[(runCount*3)+2] = (((RGBData[(runCount*6)+4] & 0xFF) >> 4) | ((((RGBData[(runCount*6)+5] & 0xFF) >> 4) & 0xFF) << 4));
		}
	}

	const NumPackets = Math.ceil(ChannelLedCount / MaxLedsInPacket / multiplier);
	
	for (let CurrPacket = 1; CurrPacket <= NumPackets; CurrPacket++) {
		const packet = [0x00, CurrPacket, NumPackets, 0x00, 0xAA];
	
		const startIndex = (CurrPacket - 1) * MaxLedsInPacket * 3 * multiplier;
		const endIndex = Math.min(CurrPacket * MaxLedsInPacket * 3 * multiplier, ChannelLedCount * 3);
	
		const data = ColorCompression_enable ? compressedRGB.slice(startIndex, endIndex) : RGBData.slice(startIndex, endIndex);
		packet.push(...data);
	
		const maxTotalValue = 175; // Adjust as needed
	
		for (let i = 5; i < packet.length; i += 3) {
			let totalValue = packet[i] + packet[i + 1] + packet[i + 2];
			if (totalValue > maxTotalValue) {
				const scaleFactor = maxTotalValue / totalValue;
				packet[i] *= scaleFactor;
				packet[i + 1] *= scaleFactor;
				packet[i + 2] *= scaleFactor;
				totalValue = maxTotalValue; 
			}
		}
		device.write(packet, 65);
	}
	
	
}

function hexToRgb(hex) {
	const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
	const colors = [];
	colors[0] = parseInt(result[1], 16);
	colors[1] = parseInt(result[2], 16);
	colors[2] = parseInt(result[3], 16);

	return colors;
}

export function onColorCompression_enableChanged(){ HWL_setting_updated(); }
export function onStatusLED_enableChanged(){ HWL_setting_updated(); }
export function onHWL_enableChanged(){ HWL_setting_updated(); }
export function onHWL_effectModeChanged(){ HWL_setting_updated(); }
export function onHWL_returnChanged(){ HWL_setting_updated(); }
export function onHWL_returnafterChanged(){ HWL_setting_updated(); }
export function onHWL_effectSpeedChanged(){ HWL_setting_updated(); }
export function onHWL_colorChanged(){ HWL_setting_updated(); }
export function onHWL_brightnessChanged(){ HWL_setting_updated(); }

function HWL_setting_updated() {
	lastHWLchange = Date.now();
	HWLupdateRequested = true;
}

function updateHWLsettings() {
	if(HWLupdateRequested == true) {
		HWLupdateRequested = false;

		const hwlenable = HWL_enable == true ? 0x01 : 0x00;
		let hwleffectMode;

		if(HWL_effectMode == "Rainbow Wave") { hwleffectMode = 1; } else if(HWL_effectMode == "Rainbow Cycle") { hwleffectMode = 2; } else if(HWL_effectMode == "Solid Color") { hwleffectMode = 3; } else if(HWL_effectMode == "Breathing Color") { hwleffectMode = 4; }
		const hwlreturn = HWL_return == true ? 0x01 : 0x00;
		const hwlcolor = hexToRgb(HWL_color);
		const statusledenable = StatusLED_enable == true ? 0x01 : 0x00;
		const colorcompressionenable = ColorCompression_enable == true ? 0x01 : 0x00;

		const packet = [0x00, 0x00, 0x00, 0x00, 0xBB, hwlenable, hwlreturn, HWL_returnafter, hwleffectMode, HWL_effectSpeed, HWL_brightness, hwlcolor[0], hwlcolor[1], hwlcolor[2], statusledenable, colorcompressionenable ];
		device.write(packet, 65);
	}
}

export function Validate(endpoint) {
	return endpoint.interface === 2;
}

export function Image() {
}
